# -*- coding: utf-8 -*-
"""data_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lChHU6ILmOBhZXSEn6T9_tWUdgB3z_ee
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def exclude_rows(data):
    data = data[data['GCSGroup'] == 2]
    data = data.dropna(subset=['PosIntFinal'])
    # drop rows with NA in PosIntFinal
    return data

def drop_unrelated_features(data_original):
    data = data_original.copy(deep=True)
    features_drop = [
        'EmplType', 'Certification',
        'Intubated', 'Paralyzed', 'Sedated',
        'CTForm1', 'IndAge', 'IndAmnesia', 'IndAMS', 'IndClinSFx', 'IndHA', 'IndHema',
        'IndLOC', 'IndMech', 'IndNeuroD', 'IndRqstMD', 'IndRqstParent', 'IndRqstTrauma',
        'IndSeiz', 'IndVomit', 'IndXraySFx', 'IndOth',
        'CTSed', 'CTSedAgitate', 'CTSedAge', 'CTSedRqst', 'CTSedOth',
        'AgeInMonth', 'Gender', 'Ethnicity', 'Race',
        'EDDisposition', 'CTDone', 'EDCT', 'PosCT',
        'Finding1', 'Finding2', 'Finding3', 'Finding4', 'Finding5', 'Finding6',
        'Finding7', 'Finding8', 'Finding9', 'Finding10', 'Finding11', 'Finding12',
        'Finding13', 'Finding14', 'Finding20', 'Finding21', 'Finding22', 'Finding23',
        'DeathTBI', 'HospHead', 'HospHeadPosCT', 'Intub24Head', 'Neurosurgery'
    ]
    data = data.drop(features_drop, axis=1)
    return data

def drop_repetitive_features(data_original):
    data = data_original.copy(deep=True)
    features_drop = [
        'GCSGroup', 'GCSEye', 'GCSVerbal', 'GCSMotor',
        'AMSAgitated', 'AMSSleep', 'AMSSlow', 'AMSRepeat', 'AMSOth',
        'SFxBasHem', 'SFxBasOto', 'SFxBasPer', 'SFxBasRet', 'SFxBasRhi',
        'ClavFace', 'ClavNeck', 'ClavFro', 'ClavOcc', 'ClavPar', 'ClavTem',
        'NeuroDMotor', 'NeuroDSensory', 'NeuroDCranial', 'NeuroDReflex', 'NeuroDOth',
         'OSIExtremity', 'OSICut', 'OSICspine', 'OSIFlank', 'OSIAbdomen', 'OSIPelvis', 'OSIOth'
         ]
    data = data.drop(features_drop, axis=1)
    return data

def replace_na(data_original):
    data = data_original.copy(deep=True)
    # InjuryMech NA
    data['InjuryMech']= data['InjuryMech'].fillna(90)
    # NA by other mechanism

    # High_impact_InjSev NA
    def fill_InjSev(mech, age):
        if mech in [6, 7]:
            return 1
        if mech in [1, 2, 3, 11]:
            return 3
        else:
            if mech in [8, 9] and age in [1]:
                return 3
            else:
                return 2

    data['High_impact_InjSev'] = data.apply(lambda x:
                                            fill_InjSev(x['InjuryMech'], x['AgeTwoPlus'])
                                            if pd.isna(x['High_impact_InjSev'])
                                            else x['High_impact_InjSev'], axis=1)
    # based on classification rules

    # Amnesia_verb NA
    data['Amnesia_verb'] = data.apply(lambda x: 91
                                      if pd.isna(x['Amnesia_verb']) and x['AgeinYears'] < 1
                                      else x['Amnesia_verb'], axis=1)
    data['Amnesia_verb']= data['Amnesia_verb'].fillna(999)
    # pre-verbal/non-verbal is too young
    # other NA by 999

    # LOCSeparate NA
    data['LOCSeparate']= data['LOCSeparate'].fillna(999)
    # NA by 999

    # LocLen NA
    mode_suspected = data.loc[data['LOCSeparate'] == 2, 'LocLen'].mode()[0]
    data['LocLen'] = data.apply(lambda x: mode_suspected
                                if pd.isna(x['LocLen']) and x['LOCSeparate'] == 2
                                else x['LocLen'], axis=1)
    mode_loss = data.loc[data['LOCSeparate'] == 1, 'LocLen'].mode()[0]
    data['LocLen'] = data.apply(lambda x: mode_loss
                                if pd.isna(x['LocLen']) and x['LOCSeparate'] == 1
                                else x['LocLen'], axis=1)
    # NA by mode among patients with LOC
    # NA by mode among patients with suspected LOC

    # Seiz NA
    data['Seiz']= data['Seiz'].fillna(999)
    # NA by 999

    # SeizOccur NA
    mode_seiz = data.loc[data['Seiz'] == 1, 'SeizOccur'].mode()[0]
    data['SeizOccur'] = data.apply(lambda x: mode_seiz
                                  if pd.isna(x['SeizOccur']) and x['Seiz'] == 1
                                  else x['SeizOccur'], axis=1)
    # NA by mode among patients with Seiz

    # SeizLen NA
    mode_imm = data.loc[data['SeizOccur'] == 1, 'SeizLen'].mode()[0]
    mode_30 = data.loc[data['SeizOccur'] == 2, 'SeizLen'].mode()[0]
    mode_after = data.loc[data['SeizOccur'] == 3, 'SeizLen'].mode()[0]
    data['SeizLen'] = data.apply(lambda x: mode_imm
                                if pd.isna(x['SeizLen']) and x['SeizOccur'] == 1
                                else x['SeizLen'], axis=1)
    data['SeizLen'] = data.apply(lambda x: mode_30
                                if pd.isna(x['SeizLen']) and x['SeizOccur'] == 2
                                else x['SeizLen'], axis=1)
    data['SeizLen'] = data.apply(lambda x: mode_after
                                if pd.isna(x['SeizLen']) and x['SeizOccur'] == 3
                                else x['SeizLen'], axis=1)
    # NA by mode among patients with Seiz immediately
    # NA by mode among patients with Seiz within 30 min
    # NA by mode among patients with Seiz after 30 min

    # ActNorm NA
    data['ActNorm']= data['ActNorm'].fillna(999)
    # NA by 999

    # HA_verb NA
    data['HA_verb'] = data.apply(lambda x: 91
                                if pd.isna(x['HA_verb']) and x['AgeinYears'] < 1
                                else x['HA_verb'], axis=1)
    data['HA_verb'] = data['HA_verb'].fillna(999)
    # pre-verbal/non-verbal is too young
    # other NA by 999

    # HASeverity NA
    mode_ha = data.loc[data['HA_verb'] == 1, 'HASeverity'].mode()[0]
    data['HASeverity'] = data.apply(lambda x: mode_ha
                                    if pd.isna(x['HASeverity']) and x['HA_verb'] == 1
                                    else x['HASeverity'], axis=1)
    # NA by mode among patients with HA

    # HAStart NA
    mode_mild = data.loc[data['HASeverity'] == 1, 'HAStart'].mode()[0]
    mode_moderate = data.loc[data['HASeverity'] == 2, 'HAStart'].mode()[0]
    mode_severe = data.loc[data['HASeverity'] == 3, 'HAStart'].mode()[0]
    data['HAStart'] = data.apply(lambda x: mode_mild
                                if pd.isna(x['HAStart']) and x['HASeverity'] == 1
                                else x['HAStart'], axis=1)
    data['HAStart'] = data.apply(lambda x: mode_moderate
                                if pd.isna(x['HAStart']) and x['HASeverity'] == 2
                                else x['HAStart'], axis=1)
    data['HAStart'] = data.apply(lambda x: mode_severe
                                if pd.isna(x['HAStart']) and x['HASeverity'] == 3
                                else x['HAStart'], axis=1)
    # NA by mode among patients with mild HA
    # NA by mode among patients with moderate HA
    # NA by mode among patients with severe HA

    # Vomit NA
    data['Vomit']= data['Vomit'].fillna(999)
    # NA by 999

    # VomitNbr NA
    mode_vomit = data.loc[data['Vomit'] == 1, 'VomitNbr'].mode()[0]
    data['VomitNbr'] = data.apply(lambda x: mode_vomit
                                  if pd.isna(x['VomitNbr']) and x['Vomit'] == 1
                                  else x['VomitNbr'], axis=1)
    # NA by mode among patients with vomiting

    # VomitStart NA
    mode_once = data.loc[data['VomitNbr'] == 1, 'VomitStart'].mode()[0]
    mode_twice = data.loc[data['VomitNbr'] == 2, 'VomitStart'].mode()[0]
    mode_more = data.loc[data['VomitNbr'] == 3, 'VomitStart'].mode()[0]
    data['VomitStart'] = data.apply(lambda x: mode_once
                                    if pd.isna(x['VomitStart']) and x['VomitNbr'] == 1
                                    else x['VomitStart'], axis=1)
    data['VomitStart'] = data.apply(lambda x: mode_twice
                                    if pd.isna(x['VomitStart']) and x['VomitNbr'] == 2
                                    else x['VomitStart'], axis=1)
    data['VomitStart'] = data.apply(lambda x: mode_more
                                    if pd.isna(x['VomitStart']) and x['VomitNbr'] == 3
                                    else x['VomitStart'], axis=1)
    # NA by mode among patients with vomiting once
    # NA by mode among patients with vomiting twice
    # NA by mode among patients with vomiting more than twice

    # VomitLast NA
    mode_once = data.loc[data['VomitNbr'] == 1, 'VomitLast'].mode()[0]
    mode_twice = data.loc[data['VomitNbr'] == 2, 'VomitLast'].mode()[0]
    mode_more = data.loc[data['VomitNbr'] == 3, 'VomitLast'].mode()[0]
    data['VomitLast'] = data.apply(lambda x: mode_once
                                  if pd.isna(x['VomitLast']) and x['VomitNbr'] == 1
                                  else x['VomitLast'], axis=1)
    data['VomitLast'] = data.apply(lambda x: mode_twice
                                  if pd.isna(x['VomitLast']) and x['VomitNbr'] == 2
                                  else x['VomitLast'], axis=1)
    data['VomitLast'] = data.apply(lambda x: mode_more
                                  if pd.isna(x['VomitLast']) and x['VomitNbr'] == 3
                                  else x['VomitLast'], axis=1)
    # NA by mode among patients with vomiting once
    # NA by mode among patients with vomiting twice
    # NA by mode among patients with vomiting more than twice

    # Dizzy NA
    data['Dizzy']= data['Dizzy'].fillna(999)
    # NA by 999

    # AMS NA
    mode_15 = data.loc[data['GCSTotal'] == 15, 'AMS'].mode()[0]
    data['AMS'] = data.apply(lambda x: mode_15
                            if pd.isna(x['AMS']) and x['GCSTotal'] == 15
                            else x['AMS'], axis=1)
    # NA by mode among patients with GCS of 15

    # SFxPalp NA
    data['SFxPalp']= data['SFxPalp'].fillna(2)
    # NA by unclear exam

    # SFxPalpDepress NA
    mode_pal = data.loc[data['SFxPalp'] == 1, 'SFxPalpDepress'].mode()[0]
    data['SFxPalpDepress'] = data.apply(lambda x: mode_pal
                                        if pd.isna(x['SFxPalpDepress']) and x['SFxPalp'] == 1
                                        else x['SFxPalpDepress'], axis=1)
    # NA by mode among patients with SFxPalp

    # FontBulg NA
    data['FontBulg']= data['FontBulg'].fillna(999)
    # NA by 999

    # SFxBas NA
    data['SFxBas']= data['SFxBas'].fillna(999)
    # NA by 999

    # Hema NA
    data['Hema']= data['Hema'].fillna(999)
    # NA by 999

    # HemaLoc NA
    mode_hema = data.loc[data['Hema'] == 1, 'HemaLoc'].mode()[0]
    data['HemaLoc'] = data.apply(lambda x: mode_hema
                                if pd.isna(x['HemaLoc']) and x['Hema'] == 1
                                else x['HemaLoc'], axis=1)
    # NA by mode among patients with Hema

    # HemaSize NA
    mode_f = data.loc[data['HemaLoc'] == 1, 'HemaSize'].mode()[0]
    mode_o = data.loc[data['HemaLoc'] == 2, 'HemaSize'].mode()[0]
    mode_p = data.loc[data['HemaLoc'] == 3, 'HemaSize'].mode()[0]
    data['HemaSize'] = data.apply(lambda x: mode_f
                                  if pd.isna(x['HemaSize']) and x['HemaLoc'] == 1
                                  else x['HemaSize'], axis=1)
    data['HemaSize'] = data.apply(lambda x: mode_o
                                  if pd.isna(x['HemaSize']) and x['HemaLoc'] == 2
                                  else x['HemaSize'], axis=1)
    data['HemaSize'] = data.apply(lambda x: mode_p
                                  if pd.isna(x['HemaSize']) and x['HemaLoc'] == 3
                                  else x['HemaSize'], axis=1)
    # NA by mode among patients with vomiting frontal Hema
    # NA by mode among patients with vomiting occipital Hema
    # NA by mode among patients with vomiting parietal/tenporal Hema

    # Clav NA
    data['Clav']= data['Clav'].fillna(999)
    # NA by 999

    # NeuroD NA
    data['NeuroD']= data['NeuroD'].fillna(999)
    # NA by 999

    # OSI NA
    data['OSI']= data['OSI'].fillna(999)
    # NA by 999

    # Drugs NA
    data['Drugs']= data['Drugs'].fillna(999)
    # NA by 999

    # Observed NA
    data['Observed']= data['Observed'].fillna(999)
    # NA by 999

    return data
